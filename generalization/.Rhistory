rm(list = ls())
setwd("./generalization")
setwd()
getwd()
setwd("./Desktop/repos/FCARPermutation/")
setwd("./generalization")
source("./auxiliary_functions.R")
niters <- 100
numcores <- detectCores()
block.sizes <- c(10, 50, 100)
m1 <- function(u) {
matrix(c(
-.3, 0,
1, -0.4*exp(-0.45 * u^2)
), ncol = 2, byrow = T)
}
m2 <- function(u) {
matrix(c(
0.8 * ((exp(5 * u)) / (1 + exp(5 * u))) - 0.3, 0.2,
-0.9 * ((exp(5 * u)) / (1 + exp(5* u))) + 0.5, 0.3
), ncol = 2, byrow = T)
}
m0 <- function(u) {
matrix(0, ncol = 2, nrow = 2)
}
gc.test1 <- gc.test(2, 2, 256, 10, function(n) simulate.far(n, 2, 1, 1, 1, list(m1)), P = 500)
gc.test1
expar1b1 <- gc.test(2, numcores, 256, block.sizes[1],
function(n) simulate.far(n, 2, 0, 1, 1, list(expar1)), P = 1000)
# only Y1 GC Y2
expar1 <- function(x) {
matrix(c(
-.3, 0,
-.2, -.4 * exp(-.45 * x ^2)
), byrow = T, ncol = 2)
}
expar1b1 <- gc.test(2, numcores, 256, block.sizes[1],
function(n) simulate.far(n, 2, 0, 1, 1, list(expar1)), P = 1000)
expar1b1
expar1b1
expar1b1 <- gc.test(2, numcores, 256, block.sizes[1],
function(n) simulate.far(n, 2, 0, 1, 1, list(expar1)), P = 1000)
expar1b1
expar1b1[[1]]
expar1b1[[1]]$null.stat1
range(expar1b1[[1]]$ref.distribution1)
mean(expar1b1[[1]]$ref.distribution1 >= expar1b1[[1]]$null.stat1)
expar1b1[[2]]$null.stat1
range(expar1b1[[2]]$ref.distribution1)
mean(expar1b1[[2]]$ref.distribution1 >= expar1b1[[2]]$null.stat1)
mean(expar1b1[[2]]$ref.distribution1 >= expar1b1[[2]]$null.stat1)
expar1b1[[1]]$null.stat1
range(expar1b1[[1]]$ref.distribution1)
mean(expar1b1[[1]]$ref.distribution1 >= expar1b1[[1]]$null.stat1)
expar1b1[[2]]$null.stat1
range(expar1b1[[2]]$ref.distribution1)
mean(expar1b1[[2]]$ref.distribution1 >= expar1b1[[2]]$null.stat1)
expar1b1[[1]]$null.stat2
range(expar1b1[[1]]$ref.distribution2)
mean(expar1b1[[1]]$ref.distribution2 >= expar1b1[[1]]$null.stat2)
expar1b1[[1]]$null.stat1
range(expar1b1[[1]]$ref.distribution1)
mean(expar1b1[[1]]$ref.distribution1 >= expar1b1[[1]]$null.stat1)
length(expar1b1)
expar1b1[[1]]$null.stat2
range(expar1b1[[1]]$ref.distribution2)
mean(expar1b1[[1]]$ref.distribution2 >= expar1b1[[1]]$null.stat2)
expar1b1[[2]]$null.stat1
range(expar1b1[[2]]$ref.distribution1)
expar1b1[[2]]$null.stat2
range(expar1b1[[2]]$ref.distribution2)
mean(expar1b1[[2]]$ref.distribution2 >= expar1b1[[2]]$null.stat2)
mean(expar1b1[[2]]$ref.distribution2 >= expar1b1[[2]]$null.stat2) < 0.05
mean(expar1b1[[2]]$ref.distribution2 >= expar1b1[[2]]$null.stat2)
expar1b1[[1]]$null.stat1
range(expar1b1[[1]]$ref.distribution1)
mean(expar1b1[[1]]$ref.distribution1 >= expar1b1[[1]]$null.stat1) < 0.05
mean(expar1b1[[1]]$ref.distribution2 >= expar1b1[[1]]$null.stat2) < 0.05
mean(expar1b1[[2]]$ref.distribution1 >= expar1b1[[2]]$null.stat1) < 0.05
mean(expar1b1[[2]]$ref.distribution2 >= expar1b1[[2]]$null.stat2) < 0.05
aygono <- gc.test(2, numcores, 256, block.sizes[1],
function(n) simulate.far(n, 2, 0, 1, 1, list(expar1)), P = 1000)
aygono[[1]]$null.stat1
expar1b1[[1]]$null.stat1
range(aygono[[1]]$ref.distribution1)
mean(aygono[[1]]$ref.distribution1 >= aygono[[1]]$null.stat1) < 0.05
aygono[[1]]$null.stat2
range(aygono[[1]]$ref.distribution2)
mean(aygono[[1]]$ref.distribution2 >= aygono[[1]]$null.stat2) < 0.05
aygono[[2]]$null.stat1
range(aygono[[2]]$ref.distribution1)
mean(aygono[[2]]$ref.distribution1 >= aygono[[2]]$null.stat1) < 0.05
aygono[[2]]$null.stat2
range(aygono[[2]]$ref.distribution2)
mean(aygono[[2]]$ref.distribution2 >= aygono[[2]]$null.stat2) < 0.05
expar1b1 <- gc.test(10, numcores, 256, block.sizes[1],
function(n) simulate.far(n, 2, 0, 1, 1, list(expar1)), P = 1000)
foo(1, expar1b1)
foo <- function(i, x) {
c(mean(x[[i]]$null.stat1 <= x[[i]]$ref.distribution1),
mean(x[[i]]$null.stat2 <= x[[i]]$ref.distribution2))
}
foo(1, expar1b1)
foo(1, expar1b1)
foo(2, expar1b1)
foo(3, expar1b1)
lapply(1:10, function(i) foo(i, expar1b1))
foo <- function(i, x) {
c(mean(x[[i]]$null.stat1 <= x[[i]]$ref.distribution1),
mean(x[[i]]$null.stat2 <= x[[i]]$ref.distribution2)) < 0.05
}
lapply(1:10, function(i) foo(i, expar1b1))
10*0.05
aygono <- gc.test(10, numcores, 256, block.sizes[1],
function(n) simulate.far(n, 2, 0, 1, 1, list(expar1)), P = 1000)
lapply(1:10, function(i) foo(i, aygono))
lapply(1:10, function(i) foo(i, expar1b1))
lapply(1:10, function(i) foo(i, expar1b1)) == lapply(1:10, function(i) foo(i, aygono))
identical(1, 2 - 1)
identical(expar1b1, aygono)
expar2 <- function(x) {
matrix(c(
-.3, 0,
0, -.4 * exp(-.45 * x ^2)
), byrow = T, ncol = 2)
}
ex2 <- simulate.far(256, 2, 0, 1, 1, list(expar1))
per.test2 <- permutation.test(ex2$ts, ex2$ref, gaussian, .2, ex2$p, ex2$p.u,
function(x) block_permute1(x, 10), P = 1000)
per.test2$null.stat1
range(per.test2$ref.distribution1)
mean(per.test2$ref.distribution1 >= per.test2$null.stat1)
mean(per.test2$ref.distribution1 >= per.test2$null.stat1) < 0.05
per.test2$null.stat2
range(per.test2$ref.distribution2)
mean(per.test2$ref.distribution2 >= per.test2$null.stat2)
set.seed(4321)
ex2 <- simulate.far(256, 2, 0, 1, 1, list(expar1))
per.test2 <- permutation.test(ex2$ts, ex2$ref, gaussian, .2, ex2$p, ex2$p.u,
function(x) block_permute1(x, 10), P = 1000)
per.test2$null.stat1
range(per.test2$ref.distribution1)
mean(per.test2$ref.distribution1 >= per.test2$null.stat1)
mean(per.test2$ref.distribution1 >= per.test2$null.stat1) < 0.05
per.test2$null.stat2
range(per.test2$ref.distribution2)
mean(per.test2$ref.distribution2 >= per.test2$null.stat2)
mean(per.test2$ref.distribution2 >= per.test2$null.stat2) < 0.05
set.seed(314)
ex2 <- simulate.far(256, 2, 0, 1, 1, list(expar1))
per.test2 <- permutation.test(ex2$ts, ex2$ref, gaussian, .2, ex2$p, ex2$p.u,
function(x) block_permute1(x, 10), P = 1000)
per.test2$null.stat1
range(per.test2$ref.distribution1)
mean(per.test2$ref.distribution1 >= per.test2$null.stat1)
mean(per.test2$ref.distribution1 >= per.test2$null.stat1) < 0.05
per.test2$null.stat2
range(per.test2$ref.distribution2)
mean(per.test2$ref.distribution2 >= per.test2$null.stat2)
mean(per.test2$ref.distribution2 >= per.test2$null.stat2) < 0.05
expar2b1 <- gc.test(5 , numcores, 256, block.sizes[1],
function(n) simulate.far(n, 2, 0, 1, 1, list(expar2)), P = 1000)
set.seed(314)
ex2 <- simulate.far(256, 2, 0, 1, 1, list(expar2))
per.test2 <- permutation.test(ex2$ts, ex2$ref, gaussian, .2, ex2$p, ex2$p.u,
function(x) block_permute1(x, 10), P = 1000)
#Both GC
expar3 <- function(x) {
matrix(c(
-.3, 0.6*exp(-0.30*x^2),
-.2, -0.4*exp(-0.45*x^2)
), byrow = T, ncol = 2)
}
per.test2$null.stat1
range(per.test2$ref.distribution1)
mean(per.test2$ref.distribution1 >= per.test2$null.stat1)
mean(per.test2$ref.distribution1 >= per.test2$null.stat1) < 0.05
per.test2$null.stat2
range(per.test2$ref.distribution2)
mean(per.test2$ref.distribution2 >= per.test2$null.stat2)
mean(per.test2$ref.distribution2 >= per.test2$null.stat2) < 0.05
#Both GC
expar3 <- function(x) {
matrix(c(
-.3, 0.6*exp(-0.30*x^2),
-.2, -0.4*exp(-0.45*x^2)
), byrow = T, ncol = 2)
}
set.seed(69)
ex3 <- simulate.far(256, 2, 0, 1, 1, list(expar3))
set.seed(69)
ex3 <- simulate.far(256, 2, 0, 1, 1, list(expar3))
per.test3 <- permutation.test(ex3$ts, ex3$ref, gaussian, .2, ex3$p, ex3$p.u,
function(x) block_permute1(x, 10), P = 1000)
per.test3
per.test3 <- permutation.test(ex3$ts, ex3$ref, gaussian, .2, ex3$p, ex3$p.u,
function(x) block_permute1(x, 10), P = 1000)
per.test3$null.stat1
range(per.test3$ref.distribution1)
mean(per.test3$ref.distribution1 >= per.test3$null.stat1)
mean(per.test3$ref.distribution1 >= per.test3$null.stat1) < 0.05
per.test3$null.stat2
range(per.test3$ref.distribution2)
mean(per.test3$ref.distribution2 >= per.test3$null.stat2)
mean(per.test3$ref.distribution2 >= per.test3$null.stat2) < 0.05
expar2b1 <- gc.test(5 , numcores, 256, block.sizes[1],
function(n) simulate.far(n, 2, 0, 1, 1, list(expar2)), P = 1000)
rm(list = ls())
